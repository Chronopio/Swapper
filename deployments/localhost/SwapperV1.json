{
  "address": "0xa2444Ec87176739cC052F54fD32E63b5e49f19fb",
  "abi": [
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "proportion",
          "type": "uint256[]"
        }
      ],
      "name": "internalSwapper",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x529dee1c1e71f3ebfe3a81e359d79bd75b5b79c9f10102f0ca0a8c284c0f09d0",
  "receipt": {
    "to": null,
    "from": "0xD215De1fc9E2514Cf274df3F2378597C7Be06Aca",
    "contractAddress": "0xa2444Ec87176739cC052F54fD32E63b5e49f19fb",
    "transactionIndex": 0,
    "gasUsed": "933981",
    "logsBloom": "0x
    "blockHash": "0x2439fdcb6b7db0c6a53987fa2fcba71cf5b2e50c028ea6d7812472d0751bdee0",
    "transactionHash": "0x529dee1c1e71f3ebfe3a81e359d79bd75b5b79c9f10102f0ca0a8c284c0f09d0",
    "logs": [],
    "blockNumber": 11589708,
    "cumulativeGasUsed": "933981",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b0ecefa974ed7228cd3a3aa6839a0955",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proportion\",\"type\":\"uint256[]\"}],\"name\":\"internalSwapper\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapperV1.sol\":\"SwapperV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/SwapperV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n/*  Proxies are completely oblivious to the existence of constructors. So we use initializer functions. OZ provides a contract for that */\\r\\ncontract SwapperV1 is Initializable {\\r\\n    // Avoiding initial values in field declarations. Constant state variables are still allowed and saves gas.\\r\\n    address public constant uniswapRouterAddress =\\r\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address private constant feeRecipient =\\r\\n        0xD215De1fc9E2514Cf274df3F2378597C7Be06Aca;\\r\\n\\r\\n    function initialize() public initializer {}\\r\\n\\r\\n    function internalSwapper(\\r\\n        address[] memory _token,\\r\\n        uint256[] memory proportion\\r\\n    ) public payable {\\r\\n        require(msg.value > 0, \\\"You can't trade if you don't send money\\\");\\r\\n        require(\\r\\n            _token.length == proportion.length,\\r\\n            \\\"You must set a proportion for each token\\\"\\r\\n        );\\r\\n        require((msg.value / 10000) * 10000 == msg.value, \\\"\\\");\\r\\n\\r\\n        address[] memory _path = new address[](2);\\r\\n        uint256 arrayLength = _token.length;\\r\\n\\r\\n        for (uint256 i = 0; i < arrayLength; i++) {\\r\\n            uint256 amountToSend = (msg.value * (proportion[i] * 100)) / 10000;\\r\\n            uint256 fee = amountToSend / 10000;\\r\\n\\r\\n            _path[0] = IUniswapV2Router02(uniswapRouterAddress).WETH();\\r\\n            _path[1] = _token[i];\\r\\n\\r\\n            payable(feeRecipient).transfer(fee);\\r\\n\\r\\n            IUniswapV2Router02(uniswapRouterAddress).swapExactETHForTokens{\\r\\n                value: amountToSend - fee\\r\\n            }(1, _path, msg.sender, block.timestamp + 300);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfadb2ed4383a070d59782be61bdd80d8f52d227c9433967a943df191d3deefb3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611007806100206000396000f3fe6080604052600436106100345760003560e01c806320ca3c7f146100395780632930df5b146100645780638129fc1c14610080575b600080fd5b34801561004557600080fd5b5061004e610097565b60405161005b9190610a8a565b60405180910390f35b61007e6004803603810190610079919061089f565b6100af565b005b34801561008c57600080fd5b50610095610587565b005b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b600034116100f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e990610af1565b60405180910390fd5b8051825114610136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012d90610b11565b60405180910390fd5b3461271080346101469190610c8e565b6101509190610cbf565b14610190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018790610b51565b60405180910390fd5b6000600267ffffffffffffffff8111156101d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102015781602001602082028036833780820191505090505b50905060008351905060005b818110156105805760006127106064868481518110610255577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516102679190610cbf565b346102729190610cbf565b61027c9190610c8e565b905060006127108261028e9190610c8e565b9050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ea57600080fd5b505afa1580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610876565b8560008151811061035c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508683815181106103cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015185600181518110610411577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073d215de1fc9e2514cf274df3f2378597c7be06aca73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104a5573d6000803e3d6000fd5b50737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff16637ff36ab582846104e29190610d19565b6001883361012c426104f49190610c38565b6040518663ffffffff1660e01b81526004016105139493929190610aa5565b6000604051808303818588803b15801561052c57600080fd5b505af1158015610540573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f8201168201806040525081019061056a919061090b565b505050808061057890610dcc565b91505061020d565b5050505050565b600060019054906101000a900460ff16806105ad575060008054906101000a900460ff16155b6105ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e390610b31565b60405180910390fd5b60008060019054906101000a900460ff16159050801561063c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561065d5760008060016101000a81548160ff0219169083151502179055505b50565b600061067361066e84610b96565b610b71565b9050808382526020820190508285602086028201111561069257600080fd5b60005b858110156106c257816106a888826107a4565b845260208401935060208301925050600181019050610695565b5050509392505050565b60006106df6106da84610bc2565b610b71565b905080838252602082019050828560208602820111156106fe57600080fd5b60005b8581101561072e5781610714888261084c565b845260208401935060208301925050600181019050610701565b5050509392505050565b600061074b61074684610bc2565b610b71565b9050808382526020820190508285602086028201111561076a57600080fd5b60005b8581101561079a57816107808882610861565b84526020840193506020830192505060018101905061076d565b5050509392505050565b6000813590506107b381610fa3565b92915050565b6000815190506107c881610fa3565b92915050565b600082601f8301126107df57600080fd5b81356107ef848260208601610660565b91505092915050565b600082601f83011261080957600080fd5b81356108198482602086016106cc565b91505092915050565b600082601f83011261083357600080fd5b8151610843848260208601610738565b91505092915050565b60008135905061085b81610fba565b92915050565b60008151905061087081610fba565b92915050565b60006020828403121561088857600080fd5b6000610896848285016107b9565b91505092915050565b600080604083850312156108b257600080fd5b600083013567ffffffffffffffff8111156108cc57600080fd5b6108d8858286016107ce565b925050602083013567ffffffffffffffff8111156108f557600080fd5b610901858286016107f8565b9150509250929050565b60006020828403121561091d57600080fd5b600082015167ffffffffffffffff81111561093757600080fd5b61094384828501610822565b91505092915050565b60006109588383610964565b60208301905092915050565b61096d81610d4d565b82525050565b61097c81610d4d565b82525050565b600061098d82610bfe565b6109978185610c16565b93506109a283610bee565b8060005b838110156109d35781516109ba888261094c565b97506109c583610c09565b9250506001810190506109a6565b5085935050505092915050565b6109e981610d89565b82525050565b60006109fc602783610c27565b9150610a0782610eb3565b604082019050919050565b6000610a1f602883610c27565b9150610a2a82610f02565b604082019050919050565b6000610a42602e83610c27565b9150610a4d82610f51565b604082019050919050565b6000610a65600083610c27565b9150610a7082610fa0565b600082019050919050565b610a8481610d7f565b82525050565b6000602082019050610a9f6000830184610973565b92915050565b6000608082019050610aba60008301876109e0565b8181036020830152610acc8186610982565b9050610adb6040830185610973565b610ae86060830184610a7b565b95945050505050565b60006020820190508181036000830152610b0a816109ef565b9050919050565b60006020820190508181036000830152610b2a81610a12565b9050919050565b60006020820190508181036000830152610b4a81610a35565b9050919050565b60006020820190508181036000830152610b6a81610a58565b9050919050565b6000610b7b610b8c565b9050610b878282610d9b565b919050565b6000604051905090565b600067ffffffffffffffff821115610bb157610bb0610e73565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610bdd57610bdc610e73565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610c4382610d7f565b9150610c4e83610d7f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c8357610c82610e15565b5b828201905092915050565b6000610c9982610d7f565b9150610ca483610d7f565b925082610cb457610cb3610e44565b5b828204905092915050565b6000610cca82610d7f565b9150610cd583610d7f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d0e57610d0d610e15565b5b828202905092915050565b6000610d2482610d7f565b9150610d2f83610d7f565b925082821015610d4257610d41610e15565b5b828203905092915050565b6000610d5882610d5f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d9482610d7f565b9050919050565b610da482610ea2565b810181811067ffffffffffffffff82111715610dc357610dc2610e73565b5b80604052505050565b6000610dd782610d7f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e0a57610e09610e15565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f596f752063616e277420747261646520696620796f7520646f6e27742073656e60008201527f64206d6f6e657900000000000000000000000000000000000000000000000000602082015250565b7f596f75206d7573742073657420612070726f706f7274696f6e20666f7220656160008201527f636820746f6b656e000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b50565b610fac81610d4d565b8114610fb757600080fd5b50565b610fc381610d7f565b8114610fce57600080fd5b5056fea264697066735822122081882507f8316c767cca05378f1d57428ee247eb3efd38d61f34bd31cc1eeeeb64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/SwapperV1.sol:SwapperV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/SwapperV1.sol:SwapperV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}