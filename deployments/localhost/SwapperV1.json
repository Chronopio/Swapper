{
  "address": "0xa2444Ec87176739cC052F54fD32E63b5e49f19fb",
  "abi": [
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "internalSwapper",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x18a37761e91527c19d622a526a72a3bf5c0a3952e6645395ecbfb02ec5de188c",
  "receipt": {
    "to": null,
    "from": "0xD215De1fc9E2514Cf274df3F2378597C7Be06Aca",
    "contractAddress": "0xa2444Ec87176739cC052F54fD32E63b5e49f19fb",
    "transactionIndex": 0,
    "gasUsed": "665686",
    "logsBloom": "0x
    "blockHash": "0x8b98b47158ed25bc43dbf7b7eb874614841f84b6bf77d60e0f90faebbdeec7bf",
    "transactionHash": "0x18a37761e91527c19d622a526a72a3bf5c0a3952e6645395ecbfb02ec5de188c",
    "logs": [],
    "blockNumber": 11589708,
    "cumulativeGasUsed": "665686",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "97bf88ee03f93e267c8c79fac177eceb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"internalSwapper\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapperV1.sol\":\"SwapperV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/SwapperV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n/*  Proxies are completely oblivious to the existence of constructors. So we use initializer functions. OZ provides a contract for that */\\r\\ncontract SwapperV1 is Initializable {\\r\\n    // Avoiding initial values in field declarations. Constant state variables are still allowed and saves gas.\\r\\n    address public constant uniswapRouterAddress =\\r\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address private constant feeRecipient =\\r\\n        0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;\\r\\n\\r\\n    function initialize() public initializer {}\\r\\n\\r\\n    function test() external payable returns (address) {\\r\\n        return IUniswapV2Router02(uniswapRouterAddress).factory();\\r\\n    }\\r\\n\\r\\n    function internalSwapper(address _token) public payable {\\r\\n        require(msg.value != 0, \\\"You can't trade if you don't send money\\\");\\r\\n\\r\\n        address[] memory _path = new address[](2);\\r\\n\\r\\n        _path[0] = IUniswapV2Router02(uniswapRouterAddress).WETH();\\r\\n        _path[1] = _token;\\r\\n\\r\\n        IUniswapV2Router02(uniswapRouterAddress).swapETHForExactTokens{\\r\\n            value: msg.value\\r\\n        }(1, _path, msg.sender, block.timestamp + 300);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf453cc745e993c6acf5f1095f22663c7b2dd5291478e5a67c57f96308b576ea4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b23806100206000396000f3fe60806040526004361061003f5760003560e01c806315e11c061461004457806320ca3c7f146100605780638129fc1c1461008b578063f8a8fd6d146100a2575b600080fd5b61005e60048036038101906100599190610610565b6100c0565b005b34801561006c57600080fd5b506100756103b1565b604051610082919061079b565b60405180910390f35b34801561009757600080fd5b506100a06103c9565b005b6100aa6104a2565b6040516100b7919061079b565b60405180910390f35b6000341415610104576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fb90610802565b60405180910390fd5b6000600267ffffffffffffffff811115610147577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101755781602001602082028036833780820191505090505b509050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190610639565b81600081518110610244577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081816001815181106102b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663fb3bdb41346001843361012c4261033691906108dd565b6040518663ffffffff1660e01b815260040161035594939291906107b6565b6000604051808303818588803b15801561036e57600080fd5b505af1158015610382573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906103ac9190610662565b505050565b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b600060019054906101000a900460ff16806103ef575060008054906101000a900460ff16155b61042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042590610822565b60405180910390fd5b60008060019054906101000a900460ff16159050801561047e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561049f5760008060016101000a81548160ff0219169083151502179055505b50565b6000737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fe57600080fd5b505afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190610639565b905090565b600061054e61054984610867565b610842565b9050808382526020820190508285602086028201111561056d57600080fd5b60005b8581101561059d578161058388826105fb565b845260208401935060208301925050600181019050610570565b5050509392505050565b6000813590506105b681610abf565b92915050565b6000815190506105cb81610abf565b92915050565b600082601f8301126105e257600080fd5b81516105f284826020860161053b565b91505092915050565b60008151905061060a81610ad6565b92915050565b60006020828403121561062257600080fd5b6000610630848285016105a7565b91505092915050565b60006020828403121561064b57600080fd5b6000610659848285016105bc565b91505092915050565b60006020828403121561067457600080fd5b600082015167ffffffffffffffff81111561068e57600080fd5b61069a848285016105d1565b91505092915050565b60006106af83836106bb565b60208301905092915050565b6106c481610933565b82525050565b6106d381610933565b82525050565b60006106e4826108a3565b6106ee81856108bb565b93506106f983610893565b8060005b8381101561072a57815161071188826106a3565b975061071c836108ae565b9250506001810190506106fd565b5085935050505092915050565b6107408161096f565b82525050565b60006107536027836108cc565b915061075e82610a21565b604082019050919050565b6000610776602e836108cc565b915061078182610a70565b604082019050919050565b61079581610965565b82525050565b60006020820190506107b060008301846106ca565b92915050565b60006080820190506107cb6000830187610737565b81810360208301526107dd81866106d9565b90506107ec60408301856106ca565b6107f9606083018461078c565b95945050505050565b6000602082019050818103600083015261081b81610746565b9050919050565b6000602082019050818103600083015261083b81610769565b9050919050565b600061084c61085d565b90506108588282610981565b919050565b6000604051905090565b600067ffffffffffffffff821115610882576108816109e1565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006108e882610965565b91506108f383610965565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610928576109276109b2565b5b828201905092915050565b600061093e82610945565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061097a82610965565b9050919050565b61098a82610a10565b810181811067ffffffffffffffff821117156109a9576109a86109e1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f596f752063616e277420747261646520696620796f7520646f6e27742073656e60008201527f64206d6f6e657900000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b610ac881610933565b8114610ad357600080fd5b50565b610adf81610965565b8114610aea57600080fd5b5056fea26469706673582212206fc622bc267faab4753fa6105032e7ca5bcb4448a38fa82892b56fbaf1b991d764736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806315e11c061461004457806320ca3c7f146100605780638129fc1c1461008b578063f8a8fd6d146100a2575b600080fd5b61005e60048036038101906100599190610610565b6100c0565b005b34801561006c57600080fd5b506100756103b1565b604051610082919061079b565b60405180910390f35b34801561009757600080fd5b506100a06103c9565b005b6100aa6104a2565b6040516100b7919061079b565b60405180910390f35b6000341415610104576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fb90610802565b60405180910390fd5b6000600267ffffffffffffffff811115610147577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101755781602001602082028036833780820191505090505b509050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190610639565b81600081518110610244577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081816001815181106102b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663fb3bdb41346001843361012c4261033691906108dd565b6040518663ffffffff1660e01b815260040161035594939291906107b6565b6000604051808303818588803b15801561036e57600080fd5b505af1158015610382573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906103ac9190610662565b505050565b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b600060019054906101000a900460ff16806103ef575060008054906101000a900460ff16155b61042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042590610822565b60405180910390fd5b60008060019054906101000a900460ff16159050801561047e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561049f5760008060016101000a81548160ff0219169083151502179055505b50565b6000737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fe57600080fd5b505afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190610639565b905090565b600061054e61054984610867565b610842565b9050808382526020820190508285602086028201111561056d57600080fd5b60005b8581101561059d578161058388826105fb565b845260208401935060208301925050600181019050610570565b5050509392505050565b6000813590506105b681610abf565b92915050565b6000815190506105cb81610abf565b92915050565b600082601f8301126105e257600080fd5b81516105f284826020860161053b565b91505092915050565b60008151905061060a81610ad6565b92915050565b60006020828403121561062257600080fd5b6000610630848285016105a7565b91505092915050565b60006020828403121561064b57600080fd5b6000610659848285016105bc565b91505092915050565b60006020828403121561067457600080fd5b600082015167ffffffffffffffff81111561068e57600080fd5b61069a848285016105d1565b91505092915050565b60006106af83836106bb565b60208301905092915050565b6106c481610933565b82525050565b6106d381610933565b82525050565b60006106e4826108a3565b6106ee81856108bb565b93506106f983610893565b8060005b8381101561072a57815161071188826106a3565b975061071c836108ae565b9250506001810190506106fd565b5085935050505092915050565b6107408161096f565b82525050565b60006107536027836108cc565b915061075e82610a21565b604082019050919050565b6000610776602e836108cc565b915061078182610a70565b604082019050919050565b61079581610965565b82525050565b60006020820190506107b060008301846106ca565b92915050565b60006080820190506107cb6000830187610737565b81810360208301526107dd81866106d9565b90506107ec60408301856106ca565b6107f9606083018461078c565b95945050505050565b6000602082019050818103600083015261081b81610746565b9050919050565b6000602082019050818103600083015261083b81610769565b9050919050565b600061084c61085d565b90506108588282610981565b919050565b6000604051905090565b600067ffffffffffffffff821115610882576108816109e1565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006108e882610965565b91506108f383610965565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610928576109276109b2565b5b828201905092915050565b600061093e82610945565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061097a82610965565b9050919050565b61098a82610a10565b810181811067ffffffffffffffff821117156109a9576109a86109e1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f596f752063616e277420747261646520696620796f7520646f6e27742073656e60008201527f64206d6f6e657900000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b610ac881610933565b8114610ad357600080fd5b50565b610adf81610965565b8114610aea57600080fd5b5056fea26469706673582212206fc622bc267faab4753fa6105032e7ca5bcb4448a38fa82892b56fbaf1b991d764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/SwapperV1.sol:SwapperV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/SwapperV1.sol:SwapperV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}