{
  "address": "0xa2444Ec87176739cC052F54fD32E63b5e49f19fb",
  "abi": [
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "proportion",
          "type": "uint256[]"
        }
      ],
      "name": "internalSwapper",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8a67f6dbd0721c436a8db7ebff9c46dc23f02669697f50e66455885b054e73c",
  "receipt": {
    "to": null,
    "from": "0xD215De1fc9E2514Cf274df3F2378597C7Be06Aca",
    "contractAddress": "0xa2444Ec87176739cC052F54fD32E63b5e49f19fb",
    "transactionIndex": 0,
    "gasUsed": "509019",
    "logsBloom": "0x
    "blockHash": "0x0d4da9eff67296363b762f88a55673bbf33c806f5ba2db643e1f1380abbdfed6",
    "transactionHash": "0xd8a67f6dbd0721c436a8db7ebff9c46dc23f02669697f50e66455885b054e73c",
    "logs": [],
    "blockNumber": 11589708,
    "cumulativeGasUsed": "509019",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "882c9d38b76a1d9ffb881b2817a49387",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proportion\",\"type\":\"uint256[]\"}],\"name\":\"internalSwapper\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapperV1.sol\":\"SwapperV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/SwapperV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n/*  Proxies are completely oblivious to the existence of constructors. So we use initializer functions. OZ provides a contract for that */\\r\\ncontract SwapperV1 is Initializable {\\r\\n    // Avoiding initial values in field declarations. Constant state variables are still allowed and saves gas.\\r\\n    address private constant uniswapRouterAddress =\\r\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address private constant feeRecipient =\\r\\n        0xD215De1fc9E2514Cf274df3F2378597C7Be06Aca;\\r\\n\\r\\n    function initialize() public initializer {}\\r\\n\\r\\n    function internalSwapper(\\r\\n        address[] memory _token,\\r\\n        uint256[] memory proportion\\r\\n    ) external payable {\\r\\n        require(\\r\\n            _token.length == proportion.length,\\r\\n            \\\"You must set a proportion for each token\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value > 0 && (msg.value / 10000) * 10000 == msg.value,\\r\\n            \\\"The amount is too low\\\"\\r\\n        );\\r\\n\\r\\n        address[] memory _path = new address[](2);\\r\\n        uint256 arrayLength = _token.length;\\r\\n\\r\\n        for (uint256 i = 0; i < arrayLength; i++) {\\r\\n            uint256 amountToSend = (msg.value * (proportion[i] * 100)) / 10000;\\r\\n            uint256 fee = amountToSend / 10000;\\r\\n\\r\\n            _path[0] = IUniswapV2Router02(uniswapRouterAddress).WETH();\\r\\n            _path[1] = _token[i];\\r\\n\\r\\n            payable(feeRecipient).transfer(fee);\\r\\n\\r\\n            IUniswapV2Router02(uniswapRouterAddress).swapExactETHForTokens{\\r\\n                value: amountToSend - fee\\r\\n            }(1, _path, msg.sender, block.timestamp + 300);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x66554bc581fff7149580ef0967278d4b8dac95ce21f4106c4a90aed09288885c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061083f806100206000396000f3fe6080604052600436106100295760003560e01c80632930df5b1461002e5780638129fc1c14610043575b600080fd5b61004161003c36600461052b565b610058565b005b34801561004f57600080fd5b506100416103e6565b80518251146100bf5760405162461bcd60e51b815260206004820152602860248201527f596f75206d7573742073657420612070726f706f7274696f6e20666f7220656160448201526731b4103a37b5b2b760c11b60648201526084015b60405180910390fd5b6000341180156100e55750346100d761271082610757565b6100e390612710610777565b145b6101295760405162461bcd60e51b815260206004820152601560248201527454686520616d6f756e7420697320746f6f206c6f7760581b60448201526064016100b6565b60408051600280825260608201835260009260208301908036833701905050835190915060005b818110156103df57600061271085838151811061017d57634e487b7160e01b600052603260045260246000fd5b602002602001015160646101919190610777565b61019b9034610777565b6101a59190610757565b905060006101b561271083610757565b9050737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561020457600080fd5b505afa158015610218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023c9190610508565b8560008151811061025d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086838151811061029d57634e487b7160e01b600052603260045260246000fd5b6020026020010151856001815181106102c657634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405173d215de1fc9e2514cf274df3f2378597c7be06aca9082156108fc029083906000818181858888f1935050505015801561031f573d6000803e3d6000fd5b50737a250d5630b4cf539739df2c5dacb4c659f2488d637ff36ab56103448385610796565b600188336103544261012c61073f565b6040518663ffffffff1660e01b81526004016103739493929190610681565b6000604051808303818588803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526103c991908101906105ee565b50505080806103d7906107ad565b915050610150565b5050505050565b600054610100900460ff16806103ff575060005460ff16155b6104625760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016100b6565b600054610100900460ff16158015610484576000805461ffff19166101011790555b8015610496576000805461ff00191690555b50565b600082601f8301126104a9578081fd5b813560206104be6104b98361071b565b6106ea565b80838252828201915082860187848660051b89010111156104dd578586fd5b855b858110156104fb578135845292840192908401906001016104df565b5090979650505050505050565b600060208284031215610519578081fd5b8151610524816107f4565b9392505050565b6000806040838503121561053d578081fd5b823567ffffffffffffffff80821115610554578283fd5b818501915085601f830112610567578283fd5b813560206105776104b98361071b565b8083825282820191508286018a848660051b8901011115610596578788fd5b8796505b848710156105c15780356105ad816107f4565b83526001969096019591830191830161059a565b50965050860135925050808211156105d7578283fd5b506105e485828601610499565b9150509250929050565b60006020808385031215610600578182fd5b825167ffffffffffffffff811115610616578283fd5b8301601f81018513610626578283fd5b80516106346104b98261071b565b80828252848201915084840188868560051b8701011115610653578687fd5b8694505b83851015610675578051835260019490940193918501918501610657565b50979650505050505050565b600060808201868352602060808185015281875180845260a0860191508289019350845b818110156106ca5784516001600160a01b0316835293830193918301916001016106a5565b50506001600160a01b039690961660408501525050506060015292915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610713576107136107de565b604052919050565b600067ffffffffffffffff821115610735576107356107de565b5060051b60200190565b60008219821115610752576107526107c8565b500190565b60008261077257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610791576107916107c8565b500290565b6000828210156107a8576107a86107c8565b500390565b60006000198214156107c1576107c16107c8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461049657600080fdfea2646970667358221220cb2190d5f83d7cd1bffe143b84b6773531547746db1672cd5fca567c8216293764736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80632930df5b1461002e5780638129fc1c14610043575b600080fd5b61004161003c36600461052b565b610058565b005b34801561004f57600080fd5b506100416103e6565b80518251146100bf5760405162461bcd60e51b815260206004820152602860248201527f596f75206d7573742073657420612070726f706f7274696f6e20666f7220656160448201526731b4103a37b5b2b760c11b60648201526084015b60405180910390fd5b6000341180156100e55750346100d761271082610757565b6100e390612710610777565b145b6101295760405162461bcd60e51b815260206004820152601560248201527454686520616d6f756e7420697320746f6f206c6f7760581b60448201526064016100b6565b60408051600280825260608201835260009260208301908036833701905050835190915060005b818110156103df57600061271085838151811061017d57634e487b7160e01b600052603260045260246000fd5b602002602001015160646101919190610777565b61019b9034610777565b6101a59190610757565b905060006101b561271083610757565b9050737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561020457600080fd5b505afa158015610218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023c9190610508565b8560008151811061025d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086838151811061029d57634e487b7160e01b600052603260045260246000fd5b6020026020010151856001815181106102c657634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405173d215de1fc9e2514cf274df3f2378597c7be06aca9082156108fc029083906000818181858888f1935050505015801561031f573d6000803e3d6000fd5b50737a250d5630b4cf539739df2c5dacb4c659f2488d637ff36ab56103448385610796565b600188336103544261012c61073f565b6040518663ffffffff1660e01b81526004016103739493929190610681565b6000604051808303818588803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526103c991908101906105ee565b50505080806103d7906107ad565b915050610150565b5050505050565b600054610100900460ff16806103ff575060005460ff16155b6104625760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016100b6565b600054610100900460ff16158015610484576000805461ffff19166101011790555b8015610496576000805461ff00191690555b50565b600082601f8301126104a9578081fd5b813560206104be6104b98361071b565b6106ea565b80838252828201915082860187848660051b89010111156104dd578586fd5b855b858110156104fb578135845292840192908401906001016104df565b5090979650505050505050565b600060208284031215610519578081fd5b8151610524816107f4565b9392505050565b6000806040838503121561053d578081fd5b823567ffffffffffffffff80821115610554578283fd5b818501915085601f830112610567578283fd5b813560206105776104b98361071b565b8083825282820191508286018a848660051b8901011115610596578788fd5b8796505b848710156105c15780356105ad816107f4565b83526001969096019591830191830161059a565b50965050860135925050808211156105d7578283fd5b506105e485828601610499565b9150509250929050565b60006020808385031215610600578182fd5b825167ffffffffffffffff811115610616578283fd5b8301601f81018513610626578283fd5b80516106346104b98261071b565b80828252848201915084840188868560051b8701011115610653578687fd5b8694505b83851015610675578051835260019490940193918501918501610657565b50979650505050505050565b600060808201868352602060808185015281875180845260a0860191508289019350845b818110156106ca5784516001600160a01b0316835293830193918301916001016106a5565b50506001600160a01b039690961660408501525050506060015292915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610713576107136107de565b604052919050565b600067ffffffffffffffff821115610735576107356107de565b5060051b60200190565b60008219821115610752576107526107c8565b500190565b60008261077257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610791576107916107c8565b500290565b6000828210156107a8576107a86107c8565b500390565b60006000198214156107c1576107c16107c8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461049657600080fdfea2646970667358221220cb2190d5f83d7cd1bffe143b84b6773531547746db1672cd5fca567c8216293764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/SwapperV1.sol:SwapperV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/SwapperV1.sol:SwapperV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}