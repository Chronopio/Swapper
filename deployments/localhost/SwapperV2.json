{
  "address": "0x9BF5C9A4FaeE3D65a21c7b80dE58701fdfae5279",
  "abi": [
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "proportion",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "isBetterUniswap",
          "type": "bool[]"
        }
      ],
      "name": "internalSwapper",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x264a6319edc370b393b9669fd3b53242b791302b567d9cafc07069c98ea038ea",
  "receipt": {
    "to": null,
    "from": "0xD215De1fc9E2514Cf274df3F2378597C7Be06Aca",
    "contractAddress": "0x9BF5C9A4FaeE3D65a21c7b80dE58701fdfae5279",
    "transactionIndex": 0,
    "gasUsed": "687119",
    "logsBloom": "0x
    "blockHash": "0xf64c923592572ba16769064da09757b68b651663f74b6f1552b3769ba1f14d03",
    "transactionHash": "0x264a6319edc370b393b9669fd3b53242b791302b567d9cafc07069c98ea038ea",
    "logs": [],
    "blockNumber": 11589709,
    "cumulativeGasUsed": "687119",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "882c9d38b76a1d9ffb881b2817a49387",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proportion\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isBetterUniswap\",\"type\":\"bool[]\"}],\"name\":\"internalSwapper\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapperV2.sol\":\"SwapperV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/SwapperV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ninterface BalancerInterface {\\r\\n    function smartSwapExactIn(\\r\\n        TokenInterface tokenIn,\\r\\n        TokenInterface tokenOut,\\r\\n        uint256 totalAmountIn,\\r\\n        uint256 minTotalAmountOut,\\r\\n        uint256 nPools\\r\\n    ) external payable returns (uint256 totalAmountOut);\\r\\n}\\r\\n\\r\\ninterface TokenInterface {\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n    function allowance(address, address) external view returns (uint256);\\r\\n\\r\\n    function approve(address, uint256) external returns (bool);\\r\\n\\r\\n    function transfer(address, uint256) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\\r\\ncontract SwapperV2 is Initializable {\\r\\n    address private constant uniswapRouterAddress =\\r\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address private constant feeRecipient =\\r\\n        0xD215De1fc9E2514Cf274df3F2378597C7Be06Aca;\\r\\n    address private constant balancerRouterAddress =\\r\\n        0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21;\\r\\n\\r\\n    function initialize() public initializer {}\\r\\n\\r\\n    function internalSwapper(\\r\\n        address[] memory _token,\\r\\n        uint256[] memory proportion,\\r\\n        bool[] memory isBetterUniswap\\r\\n    ) external payable {\\r\\n        require(\\r\\n            _token.length == proportion.length && _token.length == isBetterUniswap.length,\\r\\n            \\\"You must set a proportion for each token\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value > 0 && (msg.value / 10000) * 10000 == msg.value,\\r\\n            \\\"The amount is too low\\\"\\r\\n        );\\r\\n\\r\\n        uint256 arrayLength = _token.length;\\r\\n\\r\\n        for (uint256 i = 0; i < arrayLength; i++) {\\r\\n\\r\\n            uint256 sentAmount = (msg.value * (proportion[i] * 100)) / 10000;\\r\\n            uint256 fee = sentAmount / 10000;\\r\\n            uint256 amountToSend = sentAmount - fee;\\r\\n\\r\\n            payable(feeRecipient).transfer(fee);\\r\\n\\r\\n            if (isBetterUniswap[i]) {\\r\\n                address[] memory _path = new address[](2);\\r\\n\\r\\n                _path[0] = IUniswapV2Router02(uniswapRouterAddress).WETH();\\r\\n                _path[1] = _token[i];\\r\\n\\r\\n                IUniswapV2Router02(uniswapRouterAddress).swapExactETHForTokens{\\r\\n                    value: amountToSend\\r\\n                }(1, _path, msg.sender, block.timestamp + 300);\\r\\n            } else {\\r\\n                TokenInterface tokenOut = TokenInterface(_token[i]);\\r\\n\\r\\n                BalancerInterface(balancerRouterAddress).smartSwapExactIn{\\r\\n                    value: amountToSend\\r\\n                }(\\r\\n                    TokenInterface(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE),\\r\\n                    TokenInterface(_token[i]),\\r\\n                    amountToSend,\\r\\n                    1,\\r\\n                    1\\r\\n                );\\r\\n                tokenOut.transfer(msg.sender, tokenOut.balanceOf(address(this)));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xceea73e776327a37583873dd18d9a92f6ed1726e650908e80cc82255b95f103e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b78806100206000396000f3fe6080604052600436106100295760003560e01c80638129fc1c1461002e578063fbd5b72714610045575b600080fd5b34801561003a57600080fd5b50610043610058565b005b6100436100533660046107ff565b610110565b600054610100900460ff1680610071575060005460ff16155b6100d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156100fb576000805461ffff19166101011790555b801561010d576000805461ff00191690555b50565b81518351148015610122575080518351145b61017f5760405162461bcd60e51b815260206004820152602860248201527f596f75206d7573742073657420612070726f706f7274696f6e20666f7220656160448201526731b4103a37b5b2b760c11b60648201526084016100d0565b6000341180156101a557503461019761271082610a82565b6101a390612710610aa2565b145b6101e95760405162461bcd60e51b815260206004820152601560248201527454686520616d6f756e7420697320746f6f206c6f7760581b60448201526064016100d0565b825160005b8181101561070057600061271085838151811061021b57634e487b7160e01b600052603260045260246000fd5b6020026020010151606461022f9190610aa2565b6102399034610aa2565b6102439190610a82565b9050600061025361271083610a82565b905060006102618284610ac1565b60405190915073d215de1fc9e2514cf274df3f2378597c7be06aca9083156108fc029084906000818181858888f193505050501580156102a5573d6000803e3d6000fd5b508584815181106102c657634e487b7160e01b600052603260045260246000fd5b6020026020010151156104c257604080516002808252606082018352600092602083019080368337019050509050737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037991906107dc565b8160008151811061039a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508885815181106103da57634e487b7160e01b600052603260045260246000fd5b60200260200101518160018151811061040357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152737a250d5630b4cf539739df2c5dacb4c659f2488d637ff36ab583600184336104464261012c610a6a565b6040518663ffffffff1660e01b815260040161046594939291906109ac565b6000604051808303818588803b15801561047e57600080fd5b505af1158015610492573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526104bb91908101906108e5565b50506106ea565b60008885815181106104e457634e487b7160e01b600052603260045260246000fd5b60200260200101519050733e66b66fd1d0b02fda6c811da9e0547970db2f216001600160a01b03166321b0eb858373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8c898151811061054757634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0392831660048201529116602482015260448101869052600160648201819052608482015260a4016020604051808303818588803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105e79190610994565b506040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b15801561063157600080fd5b505afa158015610645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106699190610994565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106af57600080fd5b505af11580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190610978565b50505b50505080806106f890610ad8565b9150506101ee565b5050505050565b600082601f830112610717578081fd5b8135602061072c61072783610a46565b610a15565b80838252828201915082860187848660051b890101111561074b578586fd5b855b8581101561077257813561076081610b34565b8452928401929084019060010161074d565b5090979650505050505050565b600082601f83011261078f578081fd5b8135602061079f61072783610a46565b80838252828201915082860187848660051b89010111156107be578586fd5b855b85811015610772578135845292840192908401906001016107c0565b6000602082840312156107ed578081fd5b81516107f881610b1f565b9392505050565b600080600060608486031215610813578182fd5b833567ffffffffffffffff8082111561082a578384fd5b818601915086601f83011261083d578384fd5b8135602061084d61072783610a46565b8083825282820191508286018b848660051b890101111561086c578889fd5b8896505b8487101561089757803561088381610b1f565b835260019690960195918301918301610870565b50975050870135925050808211156108ad578384fd5b6108b98783880161077f565b935060408601359150808211156108ce578283fd5b506108db86828701610707565b9150509250925092565b600060208083850312156108f7578182fd5b825167ffffffffffffffff81111561090d578283fd5b8301601f8101851361091d578283fd5b805161092b61072782610a46565b80828252848201915084840188868560051b870101111561094a578687fd5b8694505b8385101561096c57805183526001949094019391850191850161094e565b50979650505050505050565b600060208284031215610989578081fd5b81516107f881610b34565b6000602082840312156109a5578081fd5b5051919050565b600060808201868352602060808185015281875180845260a0860191508289019350845b818110156109f55784516001600160a01b0316835293830193918301916001016109d0565b50506001600160a01b039690961660408501525050506060015292915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a3e57610a3e610b09565b604052919050565b600067ffffffffffffffff821115610a6057610a60610b09565b5060051b60200190565b60008219821115610a7d57610a7d610af3565b500190565b600082610a9d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610abc57610abc610af3565b500290565b600082821015610ad357610ad3610af3565b500390565b6000600019821415610aec57610aec610af3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461010d57600080fd5b801515811461010d57600080fdfea2646970667358221220a9a91d765f2994592d9dbfa042a16a31018579fffda378f0a79dd0c435b1347764736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80638129fc1c1461002e578063fbd5b72714610045575b600080fd5b34801561003a57600080fd5b50610043610058565b005b6100436100533660046107ff565b610110565b600054610100900460ff1680610071575060005460ff16155b6100d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156100fb576000805461ffff19166101011790555b801561010d576000805461ff00191690555b50565b81518351148015610122575080518351145b61017f5760405162461bcd60e51b815260206004820152602860248201527f596f75206d7573742073657420612070726f706f7274696f6e20666f7220656160448201526731b4103a37b5b2b760c11b60648201526084016100d0565b6000341180156101a557503461019761271082610a82565b6101a390612710610aa2565b145b6101e95760405162461bcd60e51b815260206004820152601560248201527454686520616d6f756e7420697320746f6f206c6f7760581b60448201526064016100d0565b825160005b8181101561070057600061271085838151811061021b57634e487b7160e01b600052603260045260246000fd5b6020026020010151606461022f9190610aa2565b6102399034610aa2565b6102439190610a82565b9050600061025361271083610a82565b905060006102618284610ac1565b60405190915073d215de1fc9e2514cf274df3f2378597c7be06aca9083156108fc029084906000818181858888f193505050501580156102a5573d6000803e3d6000fd5b508584815181106102c657634e487b7160e01b600052603260045260246000fd5b6020026020010151156104c257604080516002808252606082018352600092602083019080368337019050509050737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037991906107dc565b8160008151811061039a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508885815181106103da57634e487b7160e01b600052603260045260246000fd5b60200260200101518160018151811061040357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152737a250d5630b4cf539739df2c5dacb4c659f2488d637ff36ab583600184336104464261012c610a6a565b6040518663ffffffff1660e01b815260040161046594939291906109ac565b6000604051808303818588803b15801561047e57600080fd5b505af1158015610492573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526104bb91908101906108e5565b50506106ea565b60008885815181106104e457634e487b7160e01b600052603260045260246000fd5b60200260200101519050733e66b66fd1d0b02fda6c811da9e0547970db2f216001600160a01b03166321b0eb858373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8c898151811061054757634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0392831660048201529116602482015260448101869052600160648201819052608482015260a4016020604051808303818588803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105e79190610994565b506040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b15801561063157600080fd5b505afa158015610645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106699190610994565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106af57600080fd5b505af11580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190610978565b50505b50505080806106f890610ad8565b9150506101ee565b5050505050565b600082601f830112610717578081fd5b8135602061072c61072783610a46565b610a15565b80838252828201915082860187848660051b890101111561074b578586fd5b855b8581101561077257813561076081610b34565b8452928401929084019060010161074d565b5090979650505050505050565b600082601f83011261078f578081fd5b8135602061079f61072783610a46565b80838252828201915082860187848660051b89010111156107be578586fd5b855b85811015610772578135845292840192908401906001016107c0565b6000602082840312156107ed578081fd5b81516107f881610b1f565b9392505050565b600080600060608486031215610813578182fd5b833567ffffffffffffffff8082111561082a578384fd5b818601915086601f83011261083d578384fd5b8135602061084d61072783610a46565b8083825282820191508286018b848660051b890101111561086c578889fd5b8896505b8487101561089757803561088381610b1f565b835260019690960195918301918301610870565b50975050870135925050808211156108ad578384fd5b6108b98783880161077f565b935060408601359150808211156108ce578283fd5b506108db86828701610707565b9150509250925092565b600060208083850312156108f7578182fd5b825167ffffffffffffffff81111561090d578283fd5b8301601f8101851361091d578283fd5b805161092b61072782610a46565b80828252848201915084840188868560051b870101111561094a578687fd5b8694505b8385101561096c57805183526001949094019391850191850161094e565b50979650505050505050565b600060208284031215610989578081fd5b81516107f881610b34565b6000602082840312156109a5578081fd5b5051919050565b600060808201868352602060808185015281875180845260a0860191508289019350845b818110156109f55784516001600160a01b0316835293830193918301916001016109d0565b50506001600160a01b039690961660408501525050506060015292915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a3e57610a3e610b09565b604052919050565b600067ffffffffffffffff821115610a6057610a60610b09565b5060051b60200190565b60008219821115610a7d57610a7d610af3565b500190565b600082610a9d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610abc57610abc610af3565b500290565b600082821015610ad357610ad3610af3565b500390565b6000600019821415610aec57610aec610af3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461010d57600080fd5b801515811461010d57600080fdfea2646970667358221220a9a91d765f2994592d9dbfa042a16a31018579fffda378f0a79dd0c435b1347764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/SwapperV2.sol:SwapperV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/SwapperV2.sol:SwapperV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}